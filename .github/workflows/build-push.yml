name: Build and Push Container Images

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: quay.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write
    
    strategy:
      matrix:
        image-type: [main, oracle-init]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Quay.io
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.QUAY_USERNAME }}
        password: ${{ secrets.QUAY_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        flavor: |
          suffix=-${{ matrix.image-type }},onlatest=true
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix={{branch}}-,suffix=-${{ matrix.image-type }}
          type=raw,value=latest,enable={{is_default_branch}},suffix=-${{ matrix.image-type }}
    
    - name: Set Containerfile path
      id: containerfile
      run: |
        if [ "${{ matrix.image-type }}" = "oracle-init" ]; then
          echo "path=Containerfile.oracle-init" >> $GITHUB_OUTPUT
        else
          echo "path=Containerfile" >> $GITHUB_OUTPUT
        fi
    
    - name: Build container image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ${{ steps.containerfile.outputs.path }}
        platforms: linux/amd64,linux/arm64
        push: false
        load: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Run container security scan with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
        format: 'sarif'
        output: 'trivy-image-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-image-results.sarif'
        category: 'container-scan-${{ matrix.image-type }}'
    
    - name: Test container functionality
      run: |
        # Test main application image
        if [ "${{ matrix.image-type }}" = "main" ]; then
          echo "Testing main application container..."
          docker run --rm ${{ fromJSON(steps.meta.outputs.json).tags[0] }} --version || true
          docker run --rm ${{ fromJSON(steps.meta.outputs.json).tags[0] }} config init --help || true
        fi
        
        # Oracle init container test would need Oracle to be meaningful
        if [ "${{ matrix.image-type }}" = "oracle-init" ]; then
          echo "Oracle init container built successfully"
          docker run --rm ${{ fromJSON(steps.meta.outputs.json).tags[0] }} echo "Oracle init container working" || true
        fi
    
    - name: Push container image to Quay.io
      if: github.event_name != 'pull_request'
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ${{ steps.containerfile.outputs.path }}
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Generate SBOM
      if: github.event_name != 'pull_request'
      uses: anchore/sbom-action@v0
      with:
        image: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
        format: spdx-json
        output-file: sbom-${{ matrix.image-type }}.spdx.json
    
    - name: Upload SBOM as artifact
      if: github.event_name != 'pull_request'
      uses: actions/upload-artifact@v4
      with:
        name: sbom-${{ matrix.image-type }}
        path: sbom-${{ matrix.image-type }}.spdx.json

  security-summary:
    needs: build
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    steps:
    - name: Security Summary
      run: |
        echo "## ðŸ”’ Container Security Summary" >> $GITHUB_STEP_SUMMARY
        echo "- âœ… Container images scanned with Trivy" >> $GITHUB_STEP_SUMMARY
        echo "- âœ… SBOM generated for supply chain security" >> $GITHUB_STEP_SUMMARY
        echo "- âœ… Multi-architecture builds (amd64, arm64)" >> $GITHUB_STEP_SUMMARY
        echo "- âœ… Images pushed to Quay.io registry" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ðŸ“¦ Built Images:" >> $GITHUB_STEP_SUMMARY
        echo "- \`quay.io/${{ github.repository }}:latest-main\`" >> $GITHUB_STEP_SUMMARY
        echo "- \`quay.io/${{ github.repository }}:latest-oracle-init\`" >> $GITHUB_STEP_SUMMARY